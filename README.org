#+TITLE: config

** Meta
     If you place the following code into your emacs init when saving the
     ~/.dotfiles.org file the dotfiles will all be exported.

#+BEGIN_SRC emacs-lisp :tangle no
       (defun dotfiles-hook ()
         "If the current buffer is '~/.dotfiles.org' the code-blocks are
       tangled."
         (when (equal (buffer-file-name)
                      (expand-file-name (concat (getenv "HOME")
                                        "/.dotfiles.org")))
           (org-babel-tangle)))

       (add-hook 'after-save-hook 'dotfiles-hook)
     #+END_SRC

    

** presuite
*** arch
#+BEGIN_SRC
pacman -S aspell-en
sudo pacman -S fcitx-im fcitx-configtool fcitx-rime librime cmake
#+END_SRC
** bashrc
#+BEGIN_SRC conf :tangle ~/.bashrc
#+END_SRC

** tmux
#+BEGIN_SRC conf :tangle ~/.tmux.conf
#+END_SRC
** gitconfig
#+BEGIN_SRC conf :tangle ~/.gitconfig
[user]
	name = chenli
	email = czxyl@protonmail.com
	username = chenli
[core]
	editor = emacs
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
[http]
    proxy = socks5://127.0.0.1:1092
#+END_SRC
** gitignore
#+BEGIN_SRC conf :tangle ~/.gitignore
# Compiled source #
###################
,*.com
,*.class
,*.dll
,*.exe
,*.o
,*.so

# Temporary files #
###################
,*.swp
,*.swo
,*~

# Packages #
############
,*.7z
,*.dmg
,*.gz
,*.iso
,*.jar
,*.rar
,*.tar
,*.zip

# Logs #
######################
,*.log

# OS generated files #
######################
.DS_Store*
ehthumbs.db
Icon?
Thumbs.db

,*.lock

# ccls
.ccls-cache/

# c/cpp
*.out
#+END_SRC
** xonsh
#+BEGIN_SRC python :tangle ~/.xonshrc
aliases["p"]='proxychains'
$PATH.append('~/.emacs.d/bin')
$CMAKE_GENERATOR = "Ninja"
#+END_SRC
** rime
some useful posts:
- https://gist.github.com/merrickluo/553f39c131d0eb717cd59f72c9d4b60d
- https://github.com/rime/home/wiki/UserGuide#%E5%90%8C%E6%AD%A5%E7%94%A8%E6%88%B6%E8%B3%87%E6%96%99
- https://manateelazycat.github.io/emacs/2019/09/12/make-rime-works-with-linux.html

#+BEGIN_SRC conf :tangle ~/.emacs.d/rime/default.custom.yaml :mkdirp yes
patch:
  menu:
    page_size: 100
  schema_list:
    - schema: luna_pinyin_simp
#+END_SRC
*** arch/manjaro
fcitx-im fcitx-configtool fcitx-rime is necessary to use rime in pyim somehow.
#+BEGIN_SRC
sudo pacman -S fcitx-im fcitx-configtool fcitx-rime librime cmake
#+END_SRC
** xmonad
#+BEGIN_SRC conf :tangle ~/.xmonad/xmonad.hs
import qualified XMonad.StackSet as W
import XMonad.Actions.UpdateFocus
import XMonad.Util.EZConfig
import XMonad

main = do
  xmonad $ defaultConfig
    { terminal    = myTerminal
    , modMask     = myModMask
    , focusFollowsMouse = False
    } `additionalKeysP` myKeys

myTerminal    = "deepin-terminal"
myModMask     = mod4Mask -- Win key or Super_L
myBorderWidth = 5

myKeys =
    [
    -- other additional keys
    ]
    ++
    [ (mask ++ "M-" ++ [key], screenWorkspace scr >>= flip whenJust (windows . action))
         | (key, scr)  <- zip "weruio" [2,0,1,2,0,1] -- was [0..] *** change to match your screen order ***
         , (action, mask) <- [ (W.view, "") , (W.shift, "S-")]
    ]
#+END_SRC
** xarand
#+BEGIN_SRC conf :tangle ~/.screenlayout/arandr.sh :mkdirp yes
#!/bin/sh
xrandr --output DisplayPort-1 --mode 3840x2160 --pos 0x0 --rotate left --output DisplayPort-0 --mode 3840x2160 --pos 6000x0 --rotate left --output DisplayPort-2 --primary --mode 3840x2160 --pos 2160x1520 --rotate normal --output DVI-D-0 --off --output HDMI-A-0 --off
#+END_SRC
** org-protocol
*** test
after setting protocol in emacs correctly, use emacsclient to test:
#+BEGIN_SRC
emacsclient -n "org-protocol:///capture?url=http%3a%2f%2fduckduckgo%2ecom&title=DuckDuckGo"
#+END_SRC
*** firefox or chromium
add the following location in a firefox/chromium bookmark:
#+BEGIN_SRC
javascript:location.href="org-protocol:///capture?url="+encodeURIComponent(location.href)+"&title="+encodeURIComponent(document.title||"[untitled page]")
#+END_SRC
#+BEGIN_SRC conf :tangle ~/.local/share/applications/org-protocol.desktop
[Desktop Entry]
Name=org-protocol
Exec=emacsclient -n %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

*** xmonad
#+BEGIN_SRC
update-desktop-database ~/.local/share/applications/
#+END_SRC
** eaf
*** How to debug eaf inside doom
doom may have some conflicitions with eaf, but it provides sandbox, which can
give u a pure emacs:
#+BEGIN_SRC elisp
;; Welcome to the sandbox!
;;
;; This is a test bed for running Emacs Lisp in another instance of Emacs that
;; has varying amounts of Doom loaded:
;;
;; - vanilla Emacs (nothing loaded)         C-c C-c
;; - vanilla Doom (only Doom core)          C-c C-d
;; - Doom + modules - your private config   C-c C-p
;; - Doom + modules + your private config   C-c C-f
;;
;; This is done without sacrificing access to installed packages. Use the sandbox
;; to reproduce bugs and determine if Doom is to blame.

(require 'use-package)
(use-package eaf
  :load-path "~/projects/github/emacs-application-framework"
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (setq eaf-proxy-type "socks5")
  (setq eaf-proxy-host "127.0.0.1")
  (setq eaf-proxy-port "1092")
  (eaf-bind-key scroll_up "RET" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down_page "DEL" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding))
#+END_SRC

then <kbd>C-c C-c</kbd>
*** ssh: connect to host localhost port 22: Connection refused
#+BEGIN_SRC
systemctl enable sshd --now
#+END_SRC
*** flash is not loaded
when watching bilibili, it tells me that i lack flash plugin. This package fix it
#+BEGIN_SRC
pepper-flash
#+END_SRC
