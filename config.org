#+TITLE: config

** Meta
     If you place the following code into your emacs init when saving the
     ~/.dotfiles.org file the dotfiles will all be exported.

#+BEGIN_SRC emacs-lisp :tangle no
       (defun dotfiles-hook ()
         "If the current buffer is '~/.dotfiles.org' the code-blocks are
       tangled."
         (when (equal (buffer-file-name)
                      (expand-file-name (concat (getenv "HOME")
                                        "/.dotfiles.org")))
           (org-babel-tangle)))

       (add-hook 'after-save-hook 'dotfiles-hook)
     #+END_SRC

    

** presuite
*** arch
#+BEGIN_SRC bash
sudo pacman -S fcitx-im fcitx-configtool fcitx-rime librime privoxy aspell-en v2ray tclap
#+END_SRC
** bashrc
#+BEGIN_SRC conf :tangle ~/.bashrc
export CMAKE_EXPORT_COMPILE_COMMANDS=1
PATH=$PATH:~/.emacs.d/bin:~/.local/bin
PATH=$PATH:~/.gem/ruby/2.7.0/bin/
#+END_SRC

** tmux
#+BEGIN_SRC conf :tangle ~/.tmux.conf
set-option -g default-shell /usr/bin/xonsh
#+END_SRC
** zshrc
#+BEGIN_SRC conf :tangle ~/.zshrc
## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path
# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500
export EDITOR=/usr/local/bin/emacs
#export VISUAL=/usr/bin/nano
WORDCHARS=${WORDCHARS//\/[&.;]}                                 # Don't consider certain characters part of the word


## Keybindings section
bindkey -e
bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

## Alias section
alias cp="cp -i"                                                # Confirm before overwriting something
alias df='df -h'                                                # Human-readable sizes
alias free='free -m'                                            # Show sizes in MB
alias gitu='git add . && git commit && git push'

# Theming section
autoload -U compinit colors zcalc
compinit -d
colors

# enable substitution for prompt
setopt prompt_subst

# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors
 #PROMPT="%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ "
# Maia prompt
PROMPT="%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[cyan]%}>%B%(?.%{$fg[cyan]%}.%{$fg[red]%})>%{$reset_color%}%b " # Print some system information when the shell is first started
# Print a greeting message when shell is started
echo $USER@$HOST  $(uname -srm) $(lsb_release -rcs)
## Prompt on right side:
#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)
#  - shows exit status of previous command (if previous command finished with an error)
#  - is invisible, if neither is the case

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"                              # plus/minus     - clean repo
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"             # A"NUM"         - ahead by "NUM" commits
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"           # B"NUM"         - behind by "NUM" commits
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"       # red circle     - untracked files
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}●%{$reset_color%}"     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"        # green circle   - staged changes present = ready for "git push"

parse_git_branch() {
  # Show Git branch/tag, or name-rev if on detached head
  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null
}

parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=""
  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi
}

git_prompt_string() {
  local git_where="$(parse_git_branch)"

  # If inside a Git repository, print its branch and state
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"

  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n "$git_where" ] && echo "%{$fg[red]%} %(?..[%?])"
}

# Right prompt with exit status of previous command if not successful
 #RPROMPT="%{$fg[red]%} %(?..[%?])"
# Right prompt with exit status of previous command marked with ✓ or ✗
 #RPROMPT="%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})"


# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r


## Plugins section: Enable fish style features
# Use syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
# bind UP and DOWN arrow keys to history substring search
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Apply different settigns for different terminals
case $(basename "$(cat "/proc/$PPID/comm")") in
  login)
    	RPROMPT="%{$fg[red]%} %(?..[%?])"
    	alias x='startx ~/.xinitrc'      # Type name of desired desktop after x, xinitrc is configured for it
    ;;
#  'tmux: server')
#        RPROMPT='$(git_prompt_string)'
#		## Base16 Shell color themes.
#		#possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
#		#atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties,
#		#embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
#		#marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
#		#solarized, summerfruit, tomorrow, twilight
#		#theme="eighties"
#		#Possible variants: dark and light
#		#shade="dark"
#		#BASE16_SHELL="/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh"
#		#[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
#		# Use autosuggestion
#		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#  		ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#     ;;
  *)
        RPROMPT='$(git_prompt_string)'
		# Use autosuggestion
		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
  		ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    ;;
esac

export CMAKE_EXPORT_COMPILE_COMMANDS=1
PATH=$PATH:~/.gem/ruby/2.7.0/bin/
#+END_SRC
** gitconfig
#+BEGIN_SRC quote
firstlove@manjaro ~/projects/github/linux master $ tail /etc/privoxy/config  -n1
forward-socks5 / 127.0.0.1:1092 .
#+END_SRC
#+BEGIN_SRC conf :tangle ~/.gitconfig
[user]
	name = chenli
	email = chenli@uniontech.com
	username = chenli
[core]
	editor = emacs
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
[http]
    proxy = http://127.0.0.1:8118
[https]
    proxy = http://127.0.0.1:8118
[am]
        threeWay = true
#+END_SRC
** gitignore
#+BEGIN_SRC conf :tangle ~/.gitignore
# Compiled source #
###################
,*.com
,*.class
,*.dll
,*.exe
,*.o
,*.so

# Temporary files #
###################
,*.swp
,*.swo
,*~

# Packages #
############
,*.7z
,*.dmg
,*.gz
,*.iso
,*.jar
,*.rar
,*.zip

# Logs #
######################
,*.log

# OS generated files #
######################
.DS_Store*
ehthumbs.db
Icon?
Thumbs.db

,*.lock

# ccls
.ccls-cache/

# c/cpp
*.out
#+END_SRC
** xonsh
#+BEGIN_SRC python :tangle ~/.xonshrc
aliases["p"]='proxychains'
$PATH.append('~/.emacs.d/bin')
$PATH.append('~/.local/bin')
$PATH.append('~/.gem/ruby/2.7.0/bin/')
$PROMPT = '{BOLD_GREEN}{user} {YELLOW}[{cwd}]\n{BLUE}-> {BOLD_BLUE}%{NO_COLOR} '
$CMAKE_GENERATOR = "Unix Makefiles"
$EDITOR = 'emacs'
$XONSH_STORE_STDOUT = True
$CMAKE_EXPORT_COMPILE_COMMANDS=1
$BROWSER = 'chromium'
#+END_SRC
** rime
some useful posts:
- https://gist.github.com/merrickluo/553f39c131d0eb717cd59f72c9d4b60d
- https://github.com/rime/home/wiki/UserGuide#%E5%90%8C%E6%AD%A5%E7%94%A8%E6%88%B6%E8%B3%87%E6%96%99
- https://manateelazycat.github.io/emacs/2019/09/12/make-rime-works-with-linux.html

#+BEGIN_SRC conf :tangle ~/.emacs.d/rime/default.custom.yaml :mkdirp yes
patch:
  menu:
    page_size: 100
  schema_list:
    - schema: luna_pinyin_simp
#+END_SRC
*** arch/manjaro
fcitx-im fcitx-configtool fcitx-rime is necessary to use rime in pyim somehow.
** xmonad
#+BEGIN_SRC haskell :tangle ~/.xmonad/xmonad.hs
import qualified XMonad.StackSet as W
import XMonad.Actions.UpdateFocus
import XMonad.Util.EZConfig
import XMonad.Hooks.ManageDocks
import XMonad

myStartupHook :: X()
myStartupHook = do
    -- background
    -- spawn "bash ~/.screenlayout/arandr.sh"
    spawn "feh --bg-center ~/Downloads/road-landscape-nature-forest-39811.jpg  ~/Downloads/bird-s-eye-photography-of-mountain-1624496.jpg    ~/Downloads/photography-of-person-walking-on-road-1236701.jpg"
    -- autocutsel
    spawn "unclutter -grab &"
    -- redshift
    spawn "redshift -l 21:121"
    -- unclutter
    spawn "unclutter"
    -- compositor
    spawn "picom -b"

main = do
  xmonad $ defaultConfig
    { terminal    = myTerminal
    , modMask     = myModMask
    , focusFollowsMouse = False
    , startupHook        = myStartupHook <+> docksStartupHook
    } `additionalKeysP` myKeys

myTerminal    = "konsole"
myModMask     = mod4Mask -- Win key or Super_L
myBorderWidth = 5

myKeys =
    [
    -- other additional keys
    ]
    ++
    [ (mask ++ "M-" ++ [key], screenWorkspace scr >>= flip whenJust (windows . action))
         | (key, scr)  <- zip "weruio" [1,2,0,2,0,1] -- was [0..] *** change to match your screen order ***
         , (action, mask) <- [ (W.view, "") , (W.shift, "S-")]
    ]
#+END_SRC
** xinitrc
#+BEGIN_SRC conf :tangle ~/.xinitrc :mkdirp yes
# bash ~/.screenlayout/arandr.sh
# feh --bg-center ~/Downloads/road-landscape-nature-forest-39811.jpg  ~/Downloads/bird-s-eye-photography-of-mountain-1624496.jpg    ~/Downloads/photography-of-person-walking-on-road-1236701.jpg
# unclutter -grab &
xmonad
#+END_SRC
** xarand
#+BEGIN_SRC conf :tangle ~/.screenlayout/arandr.sh :mkdirp yes
#!/bin/sh
xrandr --output DisplayPort-1 --mode 3840x2160 --pos 0x0 --rotate left --output DisplayPort-0 --mode 3840x2160 --pos 6000x0 --rotate left --output DisplayPort-2 --primary --mode 3840x2160 --pos 2160x1520 --rotate normal --output DVI-D-0 --off --output HDMI-A-0 --off
#+END_SRC
** org-protocol
*** test
after setting protocol in emacs correctly, use emacsclient to test:
#+BEGIN_SRC conf
emacsclient -n "org-protocol:///capture?url=http%3a%2f%2fduckduckgo%2ecom&title=DuckDuckGo"
#+END_SRC
*** firefox
#+BEGIN_SRC quote
add the following location in a firefox bookmark:
javascript:location.href="org-protocol:///capture?url="+encodeURIComponent(location.href)+"&title="+encodeURIComponent(document.title||"[untitled page]")
#+END_SRC
#+BEGIN_SRC conf :tangle ~/.local/share/applications/org-protocol.desktop
[Desktop Entry]
Name=org-protocol
Exec=emacsclient -n %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

*** xmonad
#+BEGIN_SRC conf
update-desktop-database ~/.local/share/applications/
#+END_SRC
** termite
#+BEGIN_SRC conf :tangle ~/.config/termite/config :mkdirp yes
[options]
font = Sarasa Term J 30

[colors]
background = rgba(63, 63, 63, 0.8)

#+END_SRC
** cargo
#+BEGIN_SRC conf :tangle ~/.cargo/config :mkdirp yes
[registry]
index = "git://mirrors.ustc.edu.cn/crates.io-index"
#+END_SRC
** picom
#+BEGIN_SRC conf :tangle  ~/.config/picom.conf :mkdirp yes
backend = "glx";

glx-no-stencil = true;
glx-no-rebind-pixmap = true;
use-damage = true;
xrender-sync-fence = true;
refresh-rate = 0;
vsync = true;

mark-wmwin-focused = true;
mark-ovredir-focused = true;
use-ewmh-active-win = true;

shadow = true;
shadow-radius = 3;
shadow-offset-x = -3;
shadow-offset-y = -3;
shadow-opacity = 0.5;
shadow-exclude = [
	"! name~=''",
	"name = 'Notification'",
	"name = 'xfce4-notifyd'",
	"name *= 'picom'",
	"name *= 'Chromium'",
	"class_g = 'Navigator' && argb",
	"class_g ?= 'Notify-osd'",
	"class_g ?= 'Cairo-dock'",
	"class_g ?= 'Xfce4-notifyd'",
	"class_g ?= 'Xfce4-power-manager'",
	"_GTK_FRAME_EXTENTS@:c",
	"bounding_shaped && !rounded_corners"
];

fading = true;
fade-delta = 5;
fade-in-step = 0.03;
fade-out-step = 0.03;
no-fading-openclose = true;
fade-exclude = [ ];

active-opacity = 1;
inactive-opacity = 0.9;
frame-opacity = 1;
inactive-opacity-override = false;
# blur-background = true;
# blur-background-frame = true;
blur-background-fixed = false;
blur-kern = "3x3box";
blur-background-exclude = [
	"window_type = 'dock'",
	"window_type = 'desktop'",
	"_GTK_FRAME_EXTENTS@:c"
];

unredir-if-possible = false;

detect-rounded-corners = true;
detect-client-opacity = true;
detect-transient = true;
detect-client-leader = true;

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = false;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
};


#+END_SRC
** wget
#+BEGIN_SRC conf :tangle  ~/.wgetrc :mkdirp yes
use_proxy=on
http_proxy=127.0.0.1:8118
https_proxy=127.0.0.1:8118
#+END_SRC
** redshift
#+BEGIN_SRC conf :tangle  ~/.config/redshift/redshift.conf :mkdirp yes
 [redshift]
 location-provider=manual

 [manual]
 lat=48.853
 lon=2.349
#+END_SRC
** stack
增加以下参数
#+BEGIN_SRC conf ~/.stack/config.yaml :mkdirp yes
package-indices:
- download-prefix: https://mirrors.ustc.edu.cn/hackage/package/
  hackage-security:
    keyids:
    - 0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d
    - 1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42
    - 280b10153a522681163658cb49f632cde3f38d768b736ddbc901d99a1a772833
    - 2a96b1889dc221c17296fcc2bb34b908ca9734376f0f361660200935916ef201
    - 2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3
    - 51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921
    - 772e9f4c7db33d251d5c6e357199c819e569d130857dc225549b40845ff0890d
    - aa315286e6ad281ad61182235533c41e806e5a787e0b6d1e7eef3f09d137d2e9
    - fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0
    key-threshold: 3 # number of keys required

    # ignore expiration date, see https://github.com/commercialhaskell/stack/pull/4614
    ignore-expiry: true
#+END_SRC

** cabal
仓库：
#+BEGIN_SRC conf ~/.cabal/config :mkdirp yes
repository mirrors.ustc.edu.cn
  url: https://mirrors.ustc.edu.cn/hackage/
  secure: False
Cabal < 1.24
#+END_SRC

但是替换仓库就行了，不需要全覆盖，所以不 tangle 了


